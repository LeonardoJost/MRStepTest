---
API: 2.1
OpenSesame: 3.3.12
Platform: nt
---
set width 1920
set uniform_coordinates yes
set title "Mental Rotation as Steptest"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend legacy
set round_decimals 2
set mouse_backend legacy
set keyboard_backend legacy
set height 1080
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 24
set font_italic no
set font_family sans
set font_bold no
set experiment_path "C:\\Users\\LocalAdmin\\Documents\\GitHub\\MRStepTest\\OpenSesame"
set disable_garbage_collection yes
set description "The main experiment item"
set coordinates uniform
set compensation 0
set color_backend legacy
set clock_backend legacy
set canvas_backend legacy
set background "#000000"

define sequence BlockSequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run mouseHide always
	run ReadInstructions always
	run ShowInstructionsFixedDuration "[instructions]!=none"
	run ParametersForBlock always
	run ReadQuestionaireTxt always
	run SubBlocks always

define loop Blocks
	set source_file ""
	set source table
	set repeat 1
	set order sequential
	set description "Führt wiederholt ein anderes Item aus"
	set cycles 4
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 aaBlock instructionsRPE
	setcycle 0 instructions none
	setcycle 0 questionaireFile "InstructionsASS.txt"
	setcycle 0 maxDurationMins -1
	setcycle 0 durationBreakSeconds 0
	setcycle 0 feedbackDuration 0
	setcycle 0 feedback False
	setcycle 0 numberOfSubBlocks 1
	setcycle 1 aaBlock practice
	setcycle 1 instructions "InstructionsPractice.txt"
	setcycle 1 questionaireFile "FragebogenStufentest.txt"
	setcycle 1 maxDurationMins 3
	setcycle 1 durationBreakSeconds 15
	setcycle 1 feedbackDuration 1000
	setcycle 1 feedback True
	setcycle 1 numberOfSubBlocks 3
	setcycle 2 aaBlock main
	setcycle 2 instructions "Instructions.txt"
	setcycle 2 questionaireFile "FragebogenStufentest.txt"
	setcycle 2 maxDurationMins 3
	setcycle 2 durationBreakSeconds 15
	setcycle 2 feedbackDuration 500
	setcycle 2 feedback False
	setcycle 2 numberOfSubBlocks 20
	setcycle 3 aaBlock questionaire
	setcycle 3 instructions none
	setcycle 3 questionaireFile "Fragebogen.txt"
	setcycle 3 maxDurationMins -1
	setcycle 3 durationBreakSeconds 0
	setcycle 3 feedbackDuration 0
	setcycle 3 feedback False
	setcycle 3 numberOfSubBlocks 1
	run BlockSequence

define inline_script CreateIDandSetTestControl
	set description "Executes Python code"
	___run__
	import os.path
	questionIDandCondition=u'Zurück'
	#repeat question for ID and test/control until continue button is pressed
	while questionIDandCondition==u'Zurück':
		#ask for custom ID
		if(var.customID==1):
			#ask for ID
			#Create a form
			form = Form(
				cols=[1], rows=[2,1],
				margins=(50,50,50,50), spacing=25
			)
			#show form with question and text input
			form.set_widget(Label(text=var.IDprompt, center=False), (0,0))
			textInput=TextInput(return_accepts=True, stub=u'ID', var=u'aaID')
			form.set_widget(textInput, (0,1))
			form._exec()
			#print(var.aaID)
		else:
			import time
			var.aaID=time.time()
		#check if file for test already exists
		fileExistsTest=os.path.exists(exp.experiment_path+u'/Logfiles/ID-%s-%s.csv' % (var.aaID,var.testName))
		#check if file for control already exists
		fileExistsControl=os.path.exists(exp.experiment_path+u'/Logfiles/ID-%s-%s.csv' % (var.aaID,var.controlName))
		#Create a form
		form = Form(
			cols=[1,1], rows=[2,1],
			margins=(50,50,50,50), spacing=25
		)
		#inform about existing conditions and set buttons (no continue button if two measurements already exist)
		if fileExistsTest:
			if fileExistsControl:
				#both files already exist -> new ID?
				label=u'Achtung: Zu diesem Pseudonym existieren bereits zwei Messungen!\nBitte Logfileverzeichnis überprüfen und gegebenenfalls neues Pseudonym auswählen!'
				form.set_widget(Button(text=u'Zurück'), (0,1))	
			else:
				#test condition already exists -> now control
				label=u'Zu diesem Pseudonym existiert bereits eine Messung zum Stufentest mit mentaler Rotation. Nun folgt die Kontrollbedingung.\n\nFalls dies nicht korrekt ist, informieren Sie bitte die/den Versuchsleiter/in!'
				var.aaTestControl=var.controlName
				form.set_widget(Button(text=u'Weiter'), (0,1))
				form.set_widget(Button(text=u'Zurück'), (1,1))	
		elif fileExistsControl:
			#control already exists -> now test
			label=u'Zu diesem Pseudonym existiert bereits eine Messung zur Kontrollbedingung. Nun folgt der Stufentest mit mentaler Rotation.\n\nFalls dies nicht korrekt ist, informieren Sie bitte die/den Versuchsleiter/in!'
			var.aaTestControl=var.testName
			form.set_widget(Button(text=u'Weiter'), (0,1))
			form.set_widget(Button(text=u'Zurück'), (1,1))	
		else:
			#no conditions yet -> choose randomly
			testControlArray=[var.testName,var.controlName]
			random.shuffle(testControlArray)
			var.aaTestControl=testControlArray[0]
			label=u'Zu diesem Pseudonym existieren noch keine Messungen. Ihr zufällig ausgewählter Test heute ist die %sbedingung.\n\nFalls dies nicht korrekt ist, informieren Sie bitte die/den Versuchsleiter/in!'	% (var.aaTestControl)
			form.set_widget(Button(text=u'Weiter'), (0,1))
			form.set_widget(Button(text=u'Zurück'), (1,1))	
		#show form with question and buttons
		form.set_widget(Label(text=label, center=False), (0,0), colspan=2)
		questionIDandCondition=form._exec()
	__end__
	set _prepare ""

define keyboard_response EndInstructions
	set timeout infinite
	set flush yes
	set event_type keypress
	set duration keypress
	set description "Sammelt Tastaturantworten"
	set allowed_responses "left;right"

define inline_script Feedback
	set description "Executes Python code"
	___run__
	#showing feedback during run phase to update time
	if var.response!=u'x':
	    items.execute(u'ShowFeedback')
	__end__
	set _prepare ""

define sketchpad FeedbackCorrect
	set duration 0
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[feedbackCorrect]" x=0 y=0 z_index=0
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[formatTime]" x=0 y=-400 z_index=0

define sketchpad FeedbackWrong
	set duration 0
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[feedbackWrong]" x=0 y=0 z_index=0
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[formatTime]" x=0 y=-400 z_index=0

define sketchpad Fixation
	set duration 0
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[fixation]" x=0 y=0 z_index=0
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[formatTime]" x=0 y=-400 z_index=0

define inline_script GetTime
	set description "Executes Python code"
	set _run ""
	___prepare__
	var.thisTime=self.time()
	#var.thisTimeRound=round(var.thisTime/1000)
	var.restTime=(var.targetTime-var.thisTime)//1000+1
	#print(u'countdown rest time:'+str(var.restTime))
	__end__

define inline_script InitParams
	set description "Executes Python code"
	set _run ""
	___prepare__
	var.instructionsText=u''
	var.targetTime=0
	var.startTimeOfSubBlock=0
	var.feedbackDuration=0
	var.feedback=True
	var.correct=1
	__end__

define keyboard_response Key_response
	set timeout infinite
	set flush yes
	set event_type keypress
	set duration keypress
	set description "Sammelt Tastaturantworten"
	set allowed_responses "left;right;x"

define keyboard_response Key_response_1
	set timeout "[randomDuration]"
	set flush yes
	set event_type keypress
	set duration keypress
	set description "Sammelt Tastaturantworten"
	set allowed_responses x

define notepad License
	__note__
	### Mental Rotation experiment in blocks of 3 minutes
	#     Copyright (C) 2022  Leonardo Jost
	# 
	# This program is free software: you can redistribute it and/or modify
	# it under the terms of the GNU General Public License as published by
	# the Free Software Foundation, either version 3 of the License, or
	# (at your option) any later version.
	# 
	# This program is distributed in the hope that it will be useful,
	# but WITHOUT ANY WARRANTY; without even the implied warranty of
	# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	# GNU General Public License for more details.
	# 
	# You should have received a copy of the GNU General Public License
	# along with this program.  If not, see <https://www.gnu.org/licenses/>.
	__end__
	set description "A simple notepad to document your experiment. This plug-in does nothing."

define sequence OnCallFunctions
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run InitParams always
	run ShowCountdown always
	run ShowCountdownSequence always
	run ShowInstructions_1 always
	run ShowFeedback always

define inline_script ParametersForBlock
	set description "Executes Python code"
	set _run ""
	___prepare__
	#start with part 1 (only numbering, value is increased in loop before access)
	var.aaSubBlock=0
	#overhead before start of first block
	var.previousPartOverhead=0
	#first index of this part
	var.firstIndexOfBlock=var.stimulusNumber
	#initial time
	var.startTimeOfBlock=self.time()
	__end__

define inline_script ParametersForSubBlock
	set description "Executes Python code"
	set _run ""
	___prepare__
	#set timing options
	var.maxDuration=var.maxDurationMins*60*1000-var.durationBreakSeconds*1000
	#set maximal number of loop items
	var.loopRuns=len(var.stimulusList)-var.stimulusNumber
	var.firstIndexOfSubBlock=var.stimulusNumber
	#increase loop variable
	var.startTimeOfSubBlock=var.startTimeOfBlock+var.maxDurationMins*60*1000*var.aaSubBlock
	var.aaSubBlock=var.aaSubBlock+1
	#print(u'block:' +str(var.aaSubBlock))
	#print(u'start:' +str(var.startTimeOfSubBlock))
	#initialize times
	#only used such that calculateDuration does not produce errors
	#variables are reset in ShowInstructionsAtStart
	var.endTime=self.time()-var.startTimeOfSubBlock
	#initial to prevent exiting countdown loop
	items.execute(u'FormatTime')
	__end__

define sequence QuestionSequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run prepareQuestion always
	run ShowForm always
	run mouseShow always
	run questionaireLogger "[aaBlock]!=instructionsRPE"

define sequence Questionaire
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run ReadQuestions always
	run QuestionsLoop always

define loop QuestionsLoop
	set source_file ""
	set source table
	set repeat "[numberOfQuestions]"
	set order random
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous no
	set break_if_on_first no
	set break_if never
	setcycle 0 empty_column ""
	run QuestionSequence

define inline_script ReadInstructions
	set description "Executes Python code"
	set _run ""
	___prepare__
	if var.instructions!=u'none':
		#instructions for control vs test
		if var.aaTestControl==var.controlName and var.aaBlock==u'main':
			var.instructions=var.instructions.split(u'.txt')[0]+u'Control.txt'
		with open(pool[var.instructions],encoding="utf-8-sig") as file:
			instructionsText = file.read()
		var.instructionsText=instructionsText.replace(u'F1',var.feedbackCorrect).replace(u'F2',var.feedbackWrong).replace(u'FX',var.fixation)
		var.instructionsText1=var.instructionsText.split(u'(Continue)')[0]
		#replace part after (Continue) by empty lines to keep spacing/positioning
		#empty lines are trimmed rigorously (even non-breaking spaces) so dots are displyed
		#pixelwise positioning of text is another option but difficult as converting fontsize to px is not uniform
		if len(var.instructionsText.split(u'(Continue)'))>1:
			continueLines=var.instructionsText.split(u'(Continue)')[1].count(u'\n')
			var.instructionsText1+=u'<span style="color:rgba(0,0,0,.01)">.</span>\n'*continueLines
		#remove (Continue)
		var.instructionsText=var.instructionsText.replace(u'(Continue)',u'')
	else:
		var.instructionsText=u''
		var.instructionsText1=u''
	__end__

define inline_script ReadQuestionaireTxt
	set description "Executes Python code"
	set _run ""
	___prepare__
	#read questionaire from file
	#instructions for control vs test
	if var.aaTestControl==var.controlName and var.aaBlock==u'questionaire':
		var.questionaireFile=var.questionaireFile.split(u'.txt')[0]+u'Control.txt'
	with open(pool[var.questionaireFile],encoding="utf-8-sig") as file:
		var.questionsText = file.readlines()
	var.numberOfQuestions=len(var.questionsText)
	__end__

define inline_script ReadQuestions
	set description "Executes Python code"
	___run__
	var.questionNumber=0
	var.aaBlockQuestion=var.aaBlock+u'Questions'
	var.answerList=list()
	var.showQuestion=1  #true is converted to yes, use 0/1 instead
	var.form_response=u''
	__end__
	set _prepare ""

define inline_script SetLogfile
	set description "Executes Python code"
	___run__
	log.close()
	log.open(exp.experiment_path+u'/Logfiles/ID-%s-%s.csv' % (var.aaID, str(var.aaTestControl)))
	#delete old (empty) log file
	import os
	try:
		os.remove(exp.experiment_path+u'/subject-0.csv')
	except OSError as e:  ## if failed, report it back to the user ##
		print ("Error: %s - %s." % (e.filename, e.strerror))
	__end__
	set _prepare ""

define inline_script SetNamesAndResponses
	set description "Executes Python code"
	set _run ""
	___prepare__
	import random
	#load next stimuli from stimulusList
	var.model,var.angle,var.orientation,var.axis=var.stimulusList[var.stimulusNumber]
	var.stimulusNumber=var.stimulusNumber+1
	#randomize orientation of left and right base figure
	orientationsArray=var.orientations
	random.shuffle(orientationsArray)
	#set filenames of stimuli
	var.modelLeftFile=str(var.model)+u'_'+orientationsArray[0]+u'.png'
	var.modelRightFile=str(var.model)+u'_'+orientationsArray[1]+u'.png'
	if var.angle==0:
		var.stimulusFile=str(var.model)+u'_'+var.orientation+u'.png'
	else:
		var.stimulusFile=str(var.model)+u'_'+var.orientation+u'_'+var.axis+u'_'+str(var.angle)+u'.png'
	var.orientationLeftBase=orientationsArray[0]
	#set correct responses
	if orientationsArray[0]==var.orientation:
		var.correct_response= "left"
	else:
		var.correct_response= "right"
	__end__

define inline_script ShowCountdown
	set description "Executes Python code"
	___run__
	#show countdown until last second
	while var.targetTime>self.time()+900:
		items.execute(u'ShowCountdownSequence')
	__end__
	set _prepare ""

define sequence ShowCountdownSequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run GetTime always
	run ShowTime always

define sequence ShowFeedback
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run formatTime always
	run FeedbackCorrect "[feedback]=True and [correct]=1"
	run FeedbackWrong "[feedback]=True and [correct]=0"
	run Fixation "[feedback]=False"
	run TimeAfterFeedback always

define inline_script ShowForm
	set description "Executes Python code"
	___run__
	if(var.showQuestion==1):
		#parameters
		var.responseModified=u''
		var.questionAppend=var.noAnswerError
		#show question until answer is given
		while(var.responseModified==u''):
			# Create a form
			form = Form(
				cols=[1]*var.ncols, rows=[3,1],
				margins=(10,10,10,10), spacing=25
			)
			#set widgets: question
			form.set_widget(Label(text=var.thisQuestion, center=False), (0,0), colspan=var.ncols)
			#add RPEscale for RPE questions
			if u'RPE' in var.thisQuestionID:
				image = ImageWidget(path=pool[u'ASS_neu.png'], adjust=False, frame=False)
				form.set_widget(image, (0, 0), colspan=var.ncols)
			#set widgets depending on type and show form
			#show form and get an answer
			if var.questionType==u'TextInput':
				textInput=TextInput(return_accepts=True, stub=u'Antwort', var=u'qAnswer')
				form.set_widget(textInput, (0,1), colspan=3)
				#add button to avoid answering
				form.set_widget(Button(text=u'Ok', var=u'ok'), (3,1))
				if var.avoidQuestionsPossible==1:
					form.set_widget(Button(text=var.avoidQuestion), (4,1))		
				form_response=form._exec()
			elif var.questionType==u'Multiple' or var.questionType==u'MultipleNoAvoid':
				for col in range(var.ncols):
					form.set_widget(Button(text=var.thisQuestionOptions[col]), (col,1))		
				form_response=form._exec()
			elif var.questionType==u'ManualCode':
				textInput=TextInput(return_accepts=True, stub=u'', var=u'qAnswer')
				form.set_widget(textInput, (0,1))	
				form_response=form._exec()
			elif var.questionType==u'NecessaryCheckbox':
				form.set_widget(Checkbox(text=var.thisQuestionID, var=u'qAnswer'),(0,1),colspan=3)
				form.set_widget(Button(text=u'Ok'), (3,1))
				form_response=form._exec()
			elif var.questionType==u'KeyPress':
				form.render()
				my_keyboard = Keyboard()
				key, time = my_keyboard.get_key()
				form_response=u'keyPressed'
			else: #default is ShowText to avoid problems with first index
				form.set_widget(Button(text=u'Ok'), (0,1))
				form_response=form._exec()
			#read answer
			#get text answer from textinput if text is approved by button
			if var.questionType==u'TextInput' and not form_response==var.avoidQuestion:
				var.responseModified=var.qAnswer
			#get if required manual code was entered
			elif var.questionType==u'ManualCode' and not var.qAnswer==var.thisQuestionID:
				var.responseModified=u''
				var.questionAppend=u''
			#get if checkbox was checked
			elif var.questionType==u'NecessaryCheckbox' and var.qAnswer==u'no':
				var.responseModified=u''
				var.questionAppend=u''
			else: 
				var.responseModified=form_response
			#modify question for repeat	
			var.thisQuestion=var.thisQuestion+var.questionAppend
			#do not append more if question is again not answered
			var.questionAppend=u''
	#save answer in list (for comparison with conditions)	
	var.answerList.append((var.thisQuestionID,var.responseModified))
	#ending of blocks condition
	if var.thisQuestionID==u'RPE' and var.responseModified==10:
		var.aaSubBlock=var.numberOfSubBlocks
		var.restTime=0
		var.thisTime=0
	#else:
	#	print(var.answerList)
	__end__
	set _prepare ""

define sketchpad ShowInstructions
	set duration 0
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size="[instructionFontSize]" html=yes show_if=always text="[instructionsText]" x=0 y=0 z_index=0

define inline_script ShowInstructionsAtstart
	set description "Executes Python code"
	___run__
	#first item of block
	if var.stimulusNumber==var.firstIndexOfBlock+1:
		#show instructions during runtime of first stimulus, such that most preparation is already done
		#loop until response is given with mouseclick
		items.execute(u'ShowInstructions_1')
		#show countdown at start
		#set startTime of part after all initialization of loop	(+countdown duration)
		var.startTimeOfBlock=self.time()+var.startCountDownSeconds*1000
		var.startTimeOfSubBlock=var.startTimeOfBlock
	#first item of subBlock (and block)
	if var.stimulusNumber==var.firstIndexOfSubBlock+1:
		#set startTime of block within part after all initialization of loop	
		
		#show countdown
		var.targetTime=var.startTimeOfSubBlock
		#print(u'target time:' + str(var.targetTime))
		items.execute(u'ShowCountdown')
		#wait until start
		clock.sleep(var.startTimeOfSubBlock-self.time())
	__end__
	set _prepare ""

define sketchpad ShowInstructionsFixedDuration
	set duration "[instructionDuration]"
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size="[instructionFontSize]" html=yes show_if=always text="[instructionsText1]" x=0 y=0 z_index=0

define sequence ShowInstructions_1
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run ShowInstructions always
	run EndInstructions always

define sequence ShowRandomThings
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run randomizeDuration always
	run setImages always
	run randomStimulus always
	run Key_response_1 always
	run stimulusLogger always

define loop ShowStimuli
	set source_file ""
	set source table
	set repeat "[loopRuns]"
	set order sequential
	set description "Führt wiederholt ein anderes Item aus"
	set cycles 1
	set continuous no
	set break_if_on_first no
	set break_if "[endTime]>[maxDuration]"
	setcycle 0 empty_column ""
	run ShowStimuliSequence

define sequence ShowStimuliSequence
	set flush_keyboard yes
	set description "Führt mehrere Items nacheinander aus"
	run ShowInstructionsAtstart always
	run setStartTime always
	run ShowStimulus "[aaTestControl]=[testName] or [aaBlock]=practice"
	run ShowRandomThings "[aaTestControl]=[controlName] and [aaBlock]=main"
	run Feedback always
	run calculateDuration always

define sequence ShowStimulus
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run SetNamesAndResponses always
	run Stimulus always
	run Key_response always
	run stimulusLogger always

define sketchpad ShowTime
	set duration 0
	set description "Displays stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[restTime]" x=0 y=0 z_index=0

define sketchpad Stimulus
	# draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[endTime]" x=0 y=0 z_index=0
	set duration 0
	set description "Präsentiert Stimuli"
	draw image center=1 file="[modelLeftFile]" scale=1 show_if=always x=-500 y=-200 z_index=0
	draw image center=1 file="[modelRightFile]" scale=1 show_if=always x=500 y=-200 z_index=0
	draw image center=1 file="[stimulusFile]" scale=1 show_if=always x=0 y=200 z_index=0
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[formatTime]" x=0 y=-400 z_index=0

define inline_script StimulusRandomization
	set description "Executes Python code"
	set _run ""
	___prepare__
	import random
	#initialize lists
	stimulusList=list()
	stimulusList1=list()
	#add all stimuli once to stimulusList1
	for model in var.models:
		for angle in var.angles:
			#add angle in random direction
			random.shuffle(var.directions)
			angle=angle*var.directions[0]
			if angle<0:
				angle=360+angle
			for orientation in var.orientations:
				if angle==0:
					stimulusList1.append((model,angle,orientation,u'0'))
				else:	
					for axis in var.axes:
						stimulusList1.append((model,angle,orientation,axis))
						
	for i in range(var.numberOfTrials):
		#randomize order in stimulusList1 until overlap condition is met	
		overlap=1
		while overlap>0:
			random.shuffle(stimulusList1)
			overlap=len(set(stimulusList1[:var.minOverlap]).intersection(stimulusList[len(stimulusList)-var.minOverlap:]))
		#add all stimuli to stimulusList	
		for stimulusPair in stimulusList1:
			stimulusList.append(stimulusPair)
	var.stimulusList=stimulusList
	#set starting index (continued list through all blocks)
	var.stimulusNumber=0
	__end__

define loop SubBlocks
	set source_file ""
	set source table
	set repeat "[numberOfSubBlocks]"
	set order sequential
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous no
	set break_if_on_first no
	set break_if "[aaSubBlock]>=[numberOfSubBlocks]"
	setcycle 0 empty_column ""
	run SubBlocksSequence

define sequence SubBlocksSequence
	set flush_keyboard yes
	set description "Führt mehrere Items nacheinander aus"
	run ParametersForSubBlock always
	run mouseHide always
	run ShowStimuli "[maxDurationMins]>0"
	run Questionaire always

define inline_script TimeAfterFeedback
	set description "Executes Python code"
	___run__
	#format time output to mm:ss rounded to 15 seconds
	#format during prepare phase of next stimulus
	#integer division
	timeNow=self.time()-var.startTimeOfSubBlock+var.feedbackDuration
	formatTimeMins=int(timeNow//1000//60)
	leadingZeroMins=u''
	if formatTimeMins<10:
		leadingZeroMins=u'0'
	formatTimeSecs=int((timeNow//1000-formatTimeMins*60)//15*15)
	leadingZeroSecs=u''
	if formatTimeSecs<10:
		leadingZeroSecs=u'0'
	var.formatTime=leadingZeroMins+str(formatTimeMins)+u':'+leadingZeroSecs+str(formatTimeSecs)
	__end__
	set _prepare ""

define inline_script calculateDuration
	set description "Executes Python code"
	___run__
	#calculate end time of feedback from start of stimulus and response time
	##use this line if you want timing by start time of stimulus
	#var.startTimeOfStimulus=var.time_Stimulus-var.startTimeOfBlock
	if var.response==u'x':
		var.endTime=var.maxDuration+1 #break loop
	else:
		var.endTime=var.startTimeOfStimulus+var.response_time+var.feedbackDuration
		#check if time is out
		if var.endTime>var.maxDuration and var.feedback:
			#show feedback
			clock.sleep(var.endTime-self.time()+var.startTimeOfSubBlock)
	#note that feedback for other trials is shown in prepare phase of this script
	__end__
	___prepare__
	#and show feedback/fixation of previous trial for approximately the correct time
	#print(var.endTime-self.time()+var.startTimeOfBlock)
	clock.sleep(var.endTime-self.time()+var.startTimeOfSubBlock)
	#note that exit condition is checked in run phase of this script
	__end__

define sequence experiment
	set flush_keyboard yes
	set description "Führt mehrere Items nacheinander aus"
	run License always
	run parameters always
	run StimulusRandomization always
	run new_form_consent always
	run CreateIDandSetTestControl always
	run SetLogfile always
	run Blocks always
	run OnCallFunctions never

define inline_script formatTime
	set description "Executes Python code"
	set _run ""
	___prepare__
	#format time output to mm:ss rounded to 15 seconds
	#format during prepare phase of next stimulus
	#integer division
	timeNow=self.time()-var.startTimeOfSubBlock
	#time<0 happens during prepare phase of first stimulus of block as countdown is started in run phase
	if timeNow<0:
		timeNow=0
	formatTimeMins=int(timeNow//1000//60)
	leadingZeroMins=u''
	if formatTimeMins<10:
		leadingZeroMins=u'0'
	formatTimeSecs=int((timeNow//1000-formatTimeMins*60)//15*15)
	leadingZeroSecs=u''
	if formatTimeSecs<10:
		leadingZeroSecs=u'0'
	var.formatTime=leadingZeroMins+str(formatTimeMins)+u':'+leadingZeroSecs+str(formatTimeSecs)
	__end__

define inline_script mouseHide
	set description "Führt Python Code aus"
	___run__
	#hide mouse
	my_mouse = Mouse()
	my_mouse.show_cursor(show=False)
	__end__
	set _prepare ""

define inline_script mouseShow
	set description "Führt Python Code aus"
	___run__
	#show mouse and prevent returning to center
	my_mouse = Mouse()
	my_mouse.show_cursor(show=True)
	__end__
	set _prepare ""

define form_consent new_form_consent
	set timeout infinite
	set spacing 10
	set rows "1;4;1;1"
	set only_render no
	set margins "50;50;50;50"
	set form_title "Einverständniserklärung"
	__form_text__
	Hiermit willige ich ein, dass ich an der Studie „Mentale Rotation und Ausdauer“ teilnehme, bei der ich zwei ausbelastende Stufentests durchführen und mentale Rotationsaufgaben am PC lösen werden.
	
	Ich erkläre mich damit einverstanden, dass im Rahmen dieser Studie personenbezogene Daten/ Angaben, die mich betreffen durch den Versuchsleiter verschlüsselt erhoben (pseudonymisiert), auf elektronischen Datenträgern aufgezeichnet und weiterverarbeitet werden. Ich bin auch damit einverstanden, dass die Studienergebnisse in nicht rückentschlüsselbarer (anonymer) Form, die keinen Rückschluss auf mich zulassen, veröffentlicht werden.
	
	Mir ist bekannt, dass ich meine Einwilligung jederzeit ohne Angaben von Gründen und ohne nachteilige Folgen für mich zurückziehen und einer Weiterverarbeitung dieser Daten jederzeit widersprechen und ihre Löschung bzw. Vernichtung verlangen kann.
	__end__
	set description "A simple consent form"
	set decline_text "Ich bin nicht einverstanden."
	set decline_message "Um an dem Experiment teilzunehmen, müssen Sie einverstanden sein."
	set cols "2;2"
	set checkbox_text "Ich habe die Informationen gelesen und verstanden."
	set accept_text "Ich bin einverstanden und möchte am Experiment teilnehmen."
	set _theme gray
	widget 0 0 2 1 label text="[form_title]"
	widget 0 1 2 1 label center=no text="[form_text]"
	widget 0 2 2 1 checkbox text="[checkbox_text]" var=checkbox_status
	widget 0 3 1 1 button text="[accept_text]" var=accept_status
	widget 1 3 1 1 button text="[decline_text]"


define inline_script parameters
	set description "Executes Python code"
	set _run ""
	___prepare__
	### parameters
	#should a custom ID be used? Otherwise date and time will be ID
	#1 for true, 0 (or other) for false) #true is converted to yes, use 0/1 instead
	var.customID=1
	#ID prompt (only necessary if customID is used)
	var.IDprompt=u'Bitte Pseudonym eingeben und mit Enter bestätigen.\n\nPseudonym:\n1. Buchstabe des Vornamens der Mutter\n1. Buchstabe des Vornamens des Vaters\nersten zwei Ziffern des Geburtstags (mit Nullen)\nBsp. Paula, Erik, 03.05.1903 -> PE03'
	var.IDpromptFileExists=u'Achtung: Datei existiert bereits als Logfile! \nBitte Logfile Verzeichnis überprüfen!\n\nBitte ID eingeben und mit Enter bestätigen.'
	#test and control condition (question and answer buttons)
	var.testControlQuestion=u'Test- oder Kontrollbedingung?'
	var.testName=u'Test'
	var.controlName=u'Kontroll'
	##feedback/fixation (fixation is automatically chosen if no feedback is given)
	#also used to replace placeholders in instructions
	var.feedbackCorrect=u'✓'
	var.feedbackWrong=u'✗'
	var.fixation=u'+'
	#countdown duration at start of each part
	var.startCountDownSeconds=5
	##instructions
	#minimum duration of instructions in ms
	var.instructionDuration=1000
	var.instructionFontSize=18
	##questionaire: 
	#option to avoid question
	var.avoidQuestionsPossible=0
	var.avoidQuestion=u'keine Angabe'
	#file containing questions
	var.questionaireFile=u'Fragebogen.txt'
	#added message if no answer is given
	var.noAnswerError=u'\n\nBitte geben Sie eine Antwort ein'
	#stimulus generation
	#number of occurences of each stimulus in the generated random list
	var.numberOfTrials=10
	#stimulus parameters
	var.minOverlap=20 #minimal number of stimuli at start and end of random lists, that are not the same (should be at least 0 and well below total number of stimuli divided by 2 otherwise endless looping)
	#array of model numbers
	var.models=list(range(2,9))+list(range(12,17))
	#angles of rotation
	angleDiff=45
	minAngle=45
	maxAngle=180
	var.angles=list(range(minAngle,maxAngle+angleDiff,angleDiff))
	#directions of rotation
	var.directions=[-1,1]
	#orientations
	var.orientations=[u'a',u'b']
	#axes
	var.axes=[u'y',u'z']
	#controlmodels
	var.controlModels=list(range(17,352+1))
	__end__

define inline_script prepareQuestion
	set description "Executes Python code"
	set _run ""
	___prepare__
	#get this question
	thisQuestionFull=var.questionsText[var.questionNumber]
	var.questionNumber=var.questionNumber+1
	#prepare
	var.showQuestion=1
	#get question type
	#if question starts with ( -> type
	if thisQuestionFull[0]==u'(':
		thisQuestionSplit=thisQuestionFull.split(u')')
		thisQuestionType=thisQuestionSplit[0].replace(u'(','',1)
		#rest of question (+2 for brackets)
		thisQuestionRest=thisQuestionFull[len(thisQuestionType)+2:]
	else:
		thisQuestionType=u''
		thisQuestionRest=thisQuestionFull
	var.questionType=thisQuestionType
	#if questiontype is multiple -> get Options
	if thisQuestionType==u'Multiple':
		#get options in parenthenses
		var.thisQuestionOptions=thisQuestionRest.split(u')')[0].split(u',')
		#remove leading (
		var.thisQuestionOptions[0]=var.thisQuestionOptions[0][1:]
		#add additional option
		if var.avoidQuestionsPossible==1:
			var.thisQuestionOptions.append(var.avoidQuestion)
		var.ncols=len(var.thisQuestionOptions)
		thisQuestionRest=thisQuestionRest[len(thisQuestionRest.split(u')')[0])+1:]
	elif thisQuestionType==u'MultipleNoAvoid': #no option to avoid question
		#get options in parenthenses
		var.thisQuestionOptions=thisQuestionRest.split(u')')[0].split(u',')
		#remove leading (
		var.thisQuestionOptions[0]=var.thisQuestionOptions[0][1:]
		var.ncols=len(var.thisQuestionOptions)
		thisQuestionRest=thisQuestionRest[len(thisQuestionRest.split(u')')[0])+1:]
	elif thisQuestionType==u'TextInput':
		var.ncols=4+var.avoidQuestionsPossible
	else:	
		var.ncols=1
	#if question starts with ( -> ID
	if thisQuestionRest[0]==u'(':
		thisQuestionNext=thisQuestionRest.split(u')')[0].replace(u'(','',1)
		thisQuestionRest=thisQuestionRest[len(thisQuestionNext)+2:]
		var.thisQuestionID=thisQuestionNext
	else:
		var.thisQuestionID=var.questionNumber #added 1 is included here
	#if question starts with ( -> check
	if thisQuestionRest[0]==u'(':
		thisQuestionNext=thisQuestionRest.split(u')')[0].replace(u'(','',1)
		thisQuestionRest=thisQuestionRest[len(thisQuestionNext)+2:]
		if "==" in thisQuestionNext:
			#comparison condition with ID
			checkID=thisQuestionNext.split(u'==')[0]
			checkAnswer=thisQuestionNext.split(u'==')[1]
			#print(checkID+u' '+checkAnswer)
			if (checkID,checkAnswer) in var.answerList:
				#condition fulfilled
				#showing question
				#if question starts with ( -> ?
				if thisQuestionRest[0]==u'(':
					#other operation? add later
					print(u'no processing being added yet for ' + thisQuestionNext)
			else:
				#condition not fulfilled
				#do not show question (but do log)
				var.responseModified=checkID+u'!='+checkAnswer
				var.showQuestion=0
		else:
			#other operation? add later
			print(u'no processing being added yet for ' + thisQuestionNext)
	
	var.thisQuestion=thisQuestionRest.replace(u'--',u'\n')
	__end__

define logger questionaireLogger
	set description "Logs experimental data"
	set auto_log no
	log thisQuestionID
	log responseModified
	log aaID
	log aaSubBlock
	log aaBlockQuestion
	log aaTestControl

define sketchpad randomStimulus
	set duration 0
	set description "Präsentiert Stimuli"
	draw image center=1 file="[modelLeftFile]" scale=1 show_if=always x=-500 y=-200 z_index=0
	draw image center=1 file="[modelRightFile]" scale=1 show_if=always x=500 y=-200 z_index=0
	draw image center=1 file="[stimulusFile]" scale=1 show_if=always x=0 y=200 z_index=0
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[formatTime]" x=0 y=-400 z_index=0

define inline_script randomizeDuration
	set description "Executes Python code"
	set _run ""
	___prepare__
	import random
	var.randomDuration=random.randint(2000,5000)
	#set response time for feedback and timing
	var.response_time=var.randomDuration
	__end__

define inline_script setImages
	set description "Executes Python code"
	set _run ""
	___prepare__
	import random
	def getRandomControlModel():
		#get random stimuli
		model=random.choice(var.controlModels)
		return str(model)+u'_a.png'
	#set filenames of stimuli
	var.modelLeftFile=getRandomControlModel()
	var.modelRightFile=getRandomControlModel()
	var.stimulusFile=getRandomControlModel()
	__end__

define inline_script setStartTime
	set description "Executes Python code"
	___run__
	#start time of run phase (after preparation)
	var.startTimeOfStimulus=self.time()-var.startTimeOfSubBlock
	__end__
	set _prepare ""

define logger stimulusLogger
	set description "Registriert experimentelle Daten"
	set auto_log no
	log model
	log angle
	log orientation
	log axis
	log response
	log response_time
	log correct
	log aaBlock
	log time_Stimulus
	log correct_response
	log aaID
	log aaSubBlock
	log aaTestControl
	log startTimeOfStimulus
	log startTimeOfSubBlock

